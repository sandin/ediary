<?php
require_once 'PHPUnit/Framework.php';

/**
 * Test class for Ediary_User.
 * Generated by PHPUnit on 2011-02-26 at 14:23:54.
 */
class Ediary_DiaryTest extends ControllerTestCase
{
    /**
     * @var Ediary_Diary
     */
    protected $object;
    
    protected $data1 = array();

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
        //$s = new Ediary_Database_Schema();
        //$s->createTables();
        
        $this->data1 = array(
        'title' => 'title',
        'content' => 'content',
        'weather' => 'sunshine',
        'mood' => 'normal',
    	'status' => Ediary_Diary::STATUS_PRIVATE,
        'user_id' => '10000000',
        'journal_id' => '1'
        );
        
        $this->object = new Ediary_Diary($this->data1);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }
    
    public function testInsert() {
        // insert
        $diary = $this->object;
        
        
        //$result = $diary->insert();
        //$this->assertTrue( $result );
        
    }
    
    public function testCreate() {
        // create 
        $diary = Ediary_Diary::create( $this->data1 ) ;
        $this->assertEquals($this->data1['title'], $diary->title);
        $this->assertEquals($this->data1['content'], $diary->content);
        $this->assertEquals($this->data1['user_id'], $diary->user_id);
    }
    
    public function testDeleteById() {
        $diary = Ediary_Diary::create( $this->data1 );
        $this->assertTrue($diary->id > 0);
        
        // delete
        $result = $diary->delete();
        $this->assertTrue($result);
    }
    
    public function testUpdate() {
        // create a new diary for this test
        $newDiary = Ediary_Diary::create( $this->data1 );
        
        // find the diary
        $diary = Ediary_Diary::find($newDiary->id);
        $this->assertEquals($this->data1['content'], $diary->content);
        
        $old_saved_at = $diary->saved_at;
        sleep(1); // wait for update saved_at time
        
        // set new values
        $newContent = 'new content new content';
        $diary->content = $newContent;
        $diary->update();
        
        $this->assertEquals($newContent , $diary->content);
        $this->assertNotEquals($old_saved_at, $diary->saved_at); // has been touched
    }
    
    public function testFind() {
        $diary = Ediary_Diary::create( $this->data1 );
        $diaryId = $diary->id;
        
        $diaryFined = Ediary_Diary::find($diaryId);
        $this->assertEquals($diaryId, $diaryFined->id);
    }
    
    public function testFindByDate() {
        $diary = Ediary_Diary::create( $this->data1 );
        $diaryId = $diary->id;
        $today = Ediary_Db::today();
        
//        $start = xdebug_time_index();
        $diaryFined = Ediary_Diary::findByDate($today, $this->data1['user_id']);
//        $end = xdebug_time_index();
//        var_dump($end - $start);

        $this->assertNotNull($diaryFined);
        $this->assertEquals($diaryId, $diaryFined->id);
    }
    
    public function testFindByUser() {
        $diary = Ediary_Diary::create( $this->data1 );
        $diaryId = $diary->id;
        $user_id = $diary->user_id;
        
        $diarys = Ediary_Diary::findByUser($user_id);
        
        $this->assertNotNull($diarys);
        $this->assertTrue(is_array($diarys));
        $this->assertTrue(count($diarys) > 0);
        foreach ($diarys as $d) {
            $this->assertEquals($d['user_id'], $user_id);
        }
        
        // test just get select 
        $diary = Ediary_Diary::create( $this->data1 );
        $prePage = 2; // just create 2 diarys in this test
        
        // get 2 items in page 1
        $diarys2 = Ediary_Diary::getDiarysPaginator($user_id, 1, $prePage);
        $this->assertNotNull($diarys2);
        $this->assertEquals($diarys2->getCurrentItemCount(), $prePage);
    }
    
    public function testCheckAccess() {
        $diary = Ediary_Diary::create( $this->data1 );
        
        $this->assertTrue(Ediary_Diary::checkAccess($diary->id, $diary->user_id));
        $this->assertFalse(Ediary_Diary::checkAccess($diary->id, '3244235'));
    }
    
    public function dataProvider() {
        return array(
            array( array(
        		'title' => 'title1',
        		'content' => 'english language test',
        		'user_id' => '3'
            ), array('english')),
            array( array(
        		'title' => '中文测试',
        		'content' => '如果那些公司不是将大量的资源投在怎样更好的让用户去点击广告上，或许我们现在已经用它们解决了许多重大科学问题了',
        		'user_id' => '3',
            ), array('公司')),
            array( array(
        		'title' => '中文 测试',
        		'content' => '谷歌收盘下跌47.81‎美元，报530.7美元，跌幅8.26%。该公司在周四盘后宣布第一财季净利润攀升17%，达23亿美元，但低于市场预期。谷歌业绩下滑的原因是来自Facebook与苹果(AAPL)的竞争压力增大，使其人力和产品研发支出增加。',
        		'user_id' => '3'
            ), array('谷')),
            array( array(
        		'title' => '中文测 试',
        		'content' => '这是一个关于二战的故事题材，爱与被爱的伤感短片，残疾鞋匠收养牺牲战友的儿子相依为命，士兵在血火里煎熬扔将未婚妻照片天天贴在心里，也是因为爱，他们才会去战场抛撒热血保卫家园，即便他们曾经掠夺、践踏过别人的家园。',
        		'user_id' => '3',
            ), array('故事')),
        );
    }
    
    /** @dataProvider dataProvider */
    public function testSearch($data, $keywords) {
        $diary = Ediary_Diary::create($data);
        $this->assertTrue($diary->id > 0);
        $result = Ediary_Diary::search($data['user_id'], $keywords[0]);
        $this->assertNotNull($result);
        $this->assertTrue(count($result) > 0);
    }
    
     /** @dataProvider dataProvider */
    public function testEncrypt($data, $keywords) {
        $key = "private user key";
        $originContent = $data['content'];
        
        $diary = Ediary_Diary::create($data);
        $diary->encrypt($key);
        $this->assertEquals( $originContent,
                             Ediary_Encryption::decrypt($key, $diary->enContent));
                             
        $diary->decrypt($key);
        $this->assertEquals( $originContent, $diary->content);
        
        $this->assertNotNull($diary->content);
        $a= strlen($originContent);
        $b = strlen($diary->content);
        //var_dump($a);
        //var_dump($b);
        
    
    }
}
?>
