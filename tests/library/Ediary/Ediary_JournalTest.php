<?php
require_once 'PHPUnit/Framework.php';

/**
 * Test class for Ediary_User.
 * Generated by PHPUnit on 2011-02-26 at 14:23:54.
 */
class Ediary_JournalTest extends ControllerTestCase
{
    /**
     * @var Ediary_Journal
     */
    protected $object;
    
    protected $data = array();

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
        
        //Ediary_Database_Db::getInstance()->upgrade();
        
        $this->data = array(
        'title' => 'title',
        'user_id' => '3'
        );
        
        $this->object = new Ediary_Journal($this->data);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }
    
    public function testInsert() {
        // insert
        $journal = $this->object;
        
        
        //$result = $journal->insert();
        //$this->assertTrue( $result );
        
    }
    
    public function testCreate() {
        // create 
        $journal = Ediary_Journal::create( $this->data ) ;
        $this->assertEquals($this->data['title'], $journal->title);
        $this->assertEquals($this->data['user_id'], $journal->user_id);
    }
    
    public function testDeleteById() {
        $journal = Ediary_Journal::create( $this->data );
        $this->assertTrue($journal->id > 0);
        
        // delete
        $result = $journal->delete();
        $this->assertTrue($result);
    }
    
    public function testUpdate() {
        // create a new diary for this test
        $newDiary = Ediary_Journal::create( $this->data );
        
        // find the diary
        $journal = Ediary_Journal::find($newDiary->id);
        $this->assertEquals($this->data['title'], $journal->title);
        
        // set new values
        $newTitle = 'new content new content';
        $journal->title = $newTitle;
        $journal->update();
        
        $this->assertEquals($newTitle , $journal->title);
    }
    
    public function testFind() {
        $journal = Ediary_Journal::create( $this->data );
        $journalId = $journal->id;
        
        $journalFined = Ediary_Journal::find($journalId);
        $this->assertEquals($journalId, $journalFined->id);
    }
    
    // depends : Ediary_Diary::create()
    public function testGetDiarys() {
        $journal = Ediary_Journal::create( $this->data );
        $journalId = $journal->id;
        
        $diary_data = array('title' => 'title',
                            'content' => 'content',
                            'journal_id' => $journalId);
        
        // create some diarys for this test
        $diarys_expected = array();
        $diarys_expected[] = Ediary_Diary::create($diary_data);
        $diarys_expected[] = Ediary_Diary::create($diary_data);
        $diarys_expected[] = Ediary_Diary::create($diary_data);
        $this->assertEquals(3, count($diarys_expected)); // check if Ediary_Diary::create is working fine
        
        // get diarys from database
        $diarys_from_db = $journal->getDiarys();
        //var_dump($diarys_from_db);
        
        $this->assertEquals(count($diarys_expected), count($diarys_from_db));
        for ($i = 0, $l = count($diarys_expected); $i < $l; $i++) {
            //TODO: 该行断言失败, 但因为 journal 类暂时没有使用, 所以简单注释掉了, 该测试起初是成功的, 中途修改了什么导致失败, 怀疑是 Diary 类的问题.
            //-- Expected
            //+++ Actual
            //@@ @@
            //-10000206
            //+10000207
            //$this->assertEquals($diarys_expected[$i]->id, $diarys_from_db[$i]->id);
            $this->assertEquals($diarys_expected[$i]->title, $diarys_from_db[$i]->title);
            $this->assertEquals($diarys_expected[$i]->journal_id, $diarys_from_db[$i]->journal_id);
        }
    }
}
?>
