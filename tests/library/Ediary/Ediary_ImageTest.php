<?php
require_once 'PHPUnit/Framework.php';

/**
 * Test class for Ediary_User.
 * Generated by PHPUnit on 2011-02-26 at 14:23:54.
 */
class Ediary_ImageTest extends ControllerTestCase
{
    /**
     * @var Ediary_Image_Interface 
     */
    protected $obj;
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
    }
    
    public function dataProvider() {
        $dir = dirname(__FILE__);
        return array(
        	array($dir . '/test.jpg', 120, 0),
        	array($dir . '/test.jpg', 0, 120),
        	//array($dir . '/test.gif'),
        	//array($dir . '/test.png'),
        );
    }
    
    public function dataProviderOfGD() {
        $dir = dirname(__FILE__);
        return array(
        	array($dir . '/test.jpg', 120, 120),
        	array($dir . '/test.jpg', 70, 120),
        	array($dir . '/test.gif', 200, 120),
        	array($dir . '/test.png', 250, 250),
        	//array($dir . '/test.gif'),
        	//array($dir . '/test.png'),
        );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }
    
    /** @dataProvider dataProvider */
    public function testGmagick($file, $width, $height) {
        $this->obj = Ediary_Image_Factory::create(Ediary_Image_Factory::GMAGICK);
        
        $dir = dirname(__FILE__) . '/output/';
        $output = $dir . time() . basename($file);
        
        // 确保输入目录存在
        $this->assertTrue(Ediary_Utility_File::mkdir($dir));
        
        $this->obj->thumbnail($file, $width, $height, $output);
        $this->assertTrue(file_exists($output));
        
        $size = getimagesize($output);
        if ($width != 0) {
            $this->assertEquals($width, $size[0]);
        }
        if ($height != 0) {
            $this->assertEquals($height, $size[1]);
        }
    }
    
 	/** @dataProvider dataProviderOfGD */
    public function testGD($file, $width, $height) {
        $this->obj = Ediary_Image_Factory::create(Ediary_Image_Factory::GD);
        
        $dir = dirname(__FILE__) . '/output/';
        $output = $dir . time() . basename($file);
        
        // 确保输入目录存在
        $this->assertTrue(Ediary_Utility_File::mkdir($dir));
        
        $this->obj->thumbnail($file, $width, $height, $output);
        $this->assertTrue(file_exists($output));
        
        $size = getimagesize($output);
        // 长或宽总有一个等于目标
        if ($width != $size[0]) {
            $this->assertEquals($height, $size[1]);
        }
        if ($height != $size[1]) {
            $this->assertEquals($width, $size[0]);
        }
    }
    
    public function dataProviderForRename() {
        return array(
            array('filename.jpg', '{$1}_postfix', 'filename_postfix.jpg'),
            array('filename.gif', 'prefix_{$1}', 'prefix_filename.gif'),
            array('filename.exe', 'prefix_{$1}_postfix', 'prefix_filename_postfix.exe'),
            array('/your/path/filename.jpg', '{$1}_postfix', '/your/path/filename_postfix.jpg'),
            array('/path/filename.jpg', 'prefix_{$1}', '/path/prefix_filename.jpg'),
        );
    }
    
    /** @dataProvider dataProviderForRename */
    public function testRename($filename, $pattern, $except) {
        $this->assertEquals($except, Ediary_Image_Abstract::rename($filename, $pattern) );
    }

}