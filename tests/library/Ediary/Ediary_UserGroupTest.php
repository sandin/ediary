<?php
require_once 'PHPUnit/Framework.php';

/**
 * Test class for Ediary_User.
 * Generated by PHPUnit on 2011-02-26 at 14:23:54.
 */
class Ediary_UserGroupTest extends ControllerTestCase
{
    /**
     * @var Ediary_UserGroup
     */
    protected $object;
    
    protected $data = array();
    
    public function dataProvider() {
        $r = substr(microtime(), 3, 7); // random string
        return array(
            array(array(
                'name' => 'admin' . $r,
                'permission' => array('all')
            ), (object) array("id" => 3)),
        );
    }
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }
    
    /** @dataProvider dataProvider */
    public function testCreate($data, $user) {
        $group = Ediary_UserGroup::create($data);
        $this->assertTrue($group->id > 0);
        
        // test find by name
        $groupByName = Ediary_UserGroup::find($group->name);
        $this->assertEquals($group->id, $groupByName->id);
        
        // test find 
        $groupDb = Ediary_UserGroup::find($group->id);
        $this->assertNotNull($groupDb);
        $this->assertEquals($group->id, $groupDb->id);
        $this->assertTrue($groupDb->equals($group));
    }
    
    /** @dataProvider dataProvider */
    public function testLink($data, $user) {
        $group = Ediary_UserGroup::create($data);
        $this->assertTrue($group->id > 0);
        
        // add user to group
        $result = Ediary_UserGroup::addUserToGroup($user->id, $group->id);
        $this->assertTrue($result > 0);
        
        // get user's groups
        $groups = Ediary_UserGroup::getUserGroups($user->id);
        $this->assertTrue(in_array($group->name, $groups));
        
        // remove user form group
        $result = Ediary_UserGroup::removeUserFormGroup($user->id, $group->name);
        $this->assertTrue($result > 0);
        
        // make sure it's gone
        $groups2 = Ediary_UserGroup::getUserGroups($user->id);
        $this->assertFalse(in_array($group->name, $groups2));
    }
    
    /** @dataProvider dataProvider */
    public function testAdmin($mockData, $user) {
        // create a `admin` group
        $group = Ediary_UserGroup::create(array(
            'name' => Ediary_UserGroup::ADMIN,
            'permission' => array("all")
        ));
        
        // user is not a admin
        $this->assertFalse(Ediary_UserGroup::isAdmin($user->id));
        
        // add user to admin group
        Ediary_UserGroup::addUserToGroup($user->id, $group);
        
        // now he is a admin
        $this->assertTrue(Ediary_UserGroup::isAdmin($user->id));
        
        // cleanup
        $group->delete();
    }
    
}