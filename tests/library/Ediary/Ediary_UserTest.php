<?php
require_once 'PHPUnit/Framework.php';

/**
 * Test class for Ediary_User.
 * Generated by PHPUnit on 2011-02-26 at 14:23:54.
 */
class Ediary_UserTest extends ControllerTestCase
{
    /**
     * @var Ediary_User
     */
    protected $object;
    
    protected $data = array();
    
    public function dataProvider() {
        return array(
            array('lds2012@gmail.com', 'password', 'username', true),
        );
    }
    
    public function dataProvider2() {
        $r = substr(microtime(), 3, 7); // random string
        return array(
            array(
            	array('email' => 'lds2012@gmail.com'. $r,
            	      'password' => 'password',
            	      'username' => 'username')
            )
        );
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
        $this->object = new Ediary_User();
        
        $this->r = substr(microtime(), 3, 7); // random string
        $this->data['email'] = $this->r . 'lds2012@gmail.com';
        $this->data['name'] = "username";
        $this->data['password'] = 'asdfzf34sdfa';
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @todo Implement testGetName().
     */
    public function testGetName()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
          );
    }

    /**
     * @todo Implement testGetId().
     */
    public function testGetId()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
          );
    }

    /**
     * @todo Implement testNewFromRow().
     */
    public function testNewFromRow()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
          );
    }

    /**
     * @todo Implement testLoadFromRow().
     */
    public function testCreate()
    {
        $mockRow = array(
            'username' => 'lds',
            'email' => 'lds2012@gmail.com' . $this->r,
            'account' => '100000000',
            'photo' => 'dsafas421423',
            'password' => 'dsafas13421423',
            'security_code' => 'dsafadsfs13421423',
        );
        $user = Ediary_User::create($mockRow);
        
        $this->assertNotNull($user->id);
        $this->assertEquals($mockRow['email'], $user->email);
        $this->assertEquals($mockRow['username'], $user->username);
        $this->assertEquals($mockRow['account'], $user->account);
        $this->assertNotNull($user->created_at);
        $this->assertNotNull($user->last_logined);
        $this->assertEquals($mockRow['photo'], $user->photo);
    }

    /** @dataProvider dataProvider2 */
    public function testLoadByEmail($userDate)
    {
        // create a new user
        $user_except = Ediary_User::create($userDate);
        $this->assertNotNull($user_except);
        $this->assertTrue($user_except->id > 0);
        
        // find it
        $user = Ediary_User::find($user_except->email);
        $this->assertNotNull($user);
        $this->assertTrue($user->id > 0);
        
        $this->assertEquals($user_except->id, $user->id);
        $this->assertEquals($user_except->email, $user->email);
        $this->assertTrue($user->equals($user_except));
    }

    /** @dataProvider dataProvider2 */
    public function testLogin($data) {
        $user = Ediary_User::create($data);
        $email = $data['email'];
        $password = $data['password'];
        
        sleep(1); // 等待几秒以便查看 last_logined 字段是否被更新
        
        $result_fail = Ediary_User::login($email, 'wrong password');
        $result_ok = Ediary_User::login($email, $password);
        
        $this->assertFalse($result_fail->result);
        $this->assertNotNull($result_fail->message); // has a message on fail
        $this->assertTrue($result_ok->result);
        
        // check last_logined
        $loginedUser = $result_ok->user;
        $this->assertTrue($loginedUser->created_at !== $loginedUser->last_logined);
    }

    /** @dataProvider dataProvider2 */
    public function testDelete($data)
    {
        $user = Ediary_User::create($data);
        $this->assertTrue($user->id > 0);
        
        $user->delete();
        $this->assertNull(Ediary_User::find($user->id));
    }

    /** @dataProvider dataProvider2 */
    public function testUpdate($data)
    {
        $newName = 'newName';
        
        // create a new user
        $user = Ediary_User::create($data);
        $this->assertEquals($user->username, $data['username']);
        
        // change username
        $user->username = $newName;
        $user->update();
        $this->assertEquals($newName, $user->username);
        
        // check in DB
        $userDb = Ediary_User::find($user->id);
        $this->assertEquals($newName, $userDb->username);
    }

    /** @dataProvider dataProvider2 */
    public function testIsExistsEmail($userData) {
        // pre check
        $this->assertFalse(Ediary_User::isExistsEmail($userData['email']));

        // create user
        $user = Ediary_User::create($userData);
        
        // post check
        $this->assertTrue(Ediary_user::isExistsEmail($userData['email']));
        
        // test isExistsId()
        $this->assertTrue(Ediary_user::isExistsId($user->id));
        $this->assertFalse(Ediary_user::isExistsId('unExistsUserId'));
    }
    /*
    
    // depends : Ediary_Journal::create()
    public function testGetJournals() {
        // create a user
        $userId = $this->_createUser();
        
        // create a journal for this test 
        $journal_data = array( 'title' => 'title', 'user_id' => $userId);
        $journal = Ediary_Journal::create($journal_data);
        $this->assertNotNull($journal->id);
        
        // find the user who just created
        $user = new Ediary_User();
        $user->find($userId);
        $this->assertEquals($userId, $user->getId());
        
        // get this user's journals
        $journals_from_db = $user->getJournals();
        //var_dump($journals_from_db);
        
        // the user is a new guy, so he only has one journal 
        $this->assertEquals(1, count($journals_from_db));
        $this->assertEquals($journal->id, $journals_from_db[0]->id);
    }
    */
    
    /********************* test validator ***********************************/
    
    public function emailDataProvider() {
        return array( 
            array('lds2012@gmail.com', true),
            array('lds2012@noexists.com', true), 
            array('lds2012@noexists.cn', true), 
            array('lds2012@noexists.com.cn', true), 
            array('lds2012@noexists.org', true), 
            
            array('lds2012gmail.com', false),
            array('lds2012@gmailcom', false),
            array('asdfajjklsdfaoihosdfa', false)
        );
    }
    
    /**
     * @dataProvider emailDataProvider
     */
    public function testIsValidEmail($email, $isValid) {
        $this->assertEquals($isValid, Ediary_User::isValidEmail($email));
    }
    
    /*
    // for testIsValidUser
    */
    public function usernameDataProvider() {
        return array(
            array('lastname', true),
            array('firstname lastname',true),    // white space is allowed
            array('firstname_lastname', false),  // "_" is not allowed
            array('firstname-lastname', false),  // "-" is not allowed
            array('323423lastname', true),       // start with num
            array('lastname1234', true),         // end with num
            array('1234234234234', true),        // all num
            array('中文名', false)
        );
    }
        
    /**
     * @dataProvider usernameDataProvider
     */
    public function testIsValidUser($name, $isValid) {
        if ($isValid !== Ediary_user::isValidUserName($name)) {
            $this->fail($name . ' is invalid.');
        }
    }
    
    /*
    // for testIsValidPassword
    */
    public function passwordDataProvider() {
        return array(
            array('123456', false),    // too short
            array('12345678901234567890', false), // too long
            array('abcdefgh', true),   
            array('a2345678', true),   
            array('12345678', true),  
            array('1234567c', true),   
            array('asdf1234214sDFSF', true) // prefect password
        );
    }
    
    /**
     * @dataProvider passwordDataProvider
     */
    public function testIsValidPassword($password, $isValid) {
        if ($isValid !== Ediary_user::isValidPassword($password)) {
            $this->fail($password . ' is invalid.');
        }
    }
    
}
?>
