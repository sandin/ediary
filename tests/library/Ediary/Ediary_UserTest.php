<?php
require_once 'PHPUnit/Framework.php';

/**
 * Test class for Ediary_User.
 * Generated by PHPUnit on 2011-02-26 at 14:23:54.
 */
class Ediary_UserTest extends ControllerTestCase
{
    /**
     * @var Ediary_User
     */
    protected $object;
    
    protected $data = array();

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
        $this->object = new Ediary_User();
        
        $this->data['email'] = 'lds2012@gmail.com' . microtime();
        $this->data['name'] = "lds' or 1=1";
        $this->data['password'] = 'asdfzf34sdfa';
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @todo Implement testGetName().
     */
    public function testGetName()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
          );
    }

    /**
     * @todo Implement testGetId().
     */
    public function testGetId()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
          );
    }

    /**
     * @todo Implement testNewFromRow().
     */
    public function testNewFromRow()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
          );
    }

    /**
     * @todo Implement testLoadFromRow().
     */
    public function testLoadFromArray()
    {
        $mockRow = array(
            Ediary_User::ID => '1234',
            Ediary_User::NAME => 'lds',
            Ediary_User::EMAIL => 'lds2012@gmail.com',
            Ediary_User::ACCOUNT => '100000000',
            Ediary_User::CREATED => '2010-12-21 12:12:12',
            Ediary_User::LAST_TIME => '2011-12-23 12:12:12',
            Ediary_User::PIC => 'dsafas421423',
            Ediary_User::PASSWORD => 'dsafas13421423',
            Ediary_User::SECURITY_CODE => 'dsafadsfs13421423',
        );
        $user = $this->object->loadFromArray($mockRow);
        
        $this->assertEquals($mockRow[Ediary_User::ID], $user->getId());
        $this->assertEquals($mockRow[Ediary_User::EMAIL], $user->mEmail);
        $this->assertEquals($mockRow[Ediary_User::NAME], $user->mName);
        $this->assertEquals($mockRow[Ediary_User::ACCOUNT], $user->mAccount);
        $this->assertEquals($mockRow[Ediary_User::CREATED], $user->mCreated);
        $this->assertEquals($mockRow[Ediary_User::LAST_TIME], $user->mLastTime);
        $this->assertEquals($mockRow[Ediary_User::PIC], $user->mPic);
        
        $this->assertTrue($user->isLoad());
    }

    /**
     * depend User#create()
     */
    public function testLoadById()
    {
        // create a user and load it by id
        $userId = $this->_createUser();
        $user = $this->object->loadById($userId);
        
        $this->assertEquals($userId, $user->getId());
        $this->assertEquals($this->data['email'], $user->mEmail);
        $this->assertEquals($this->data['name'], $user->mName);
    }
    
    /**
     * depend User#create()
     */
    public function testLoadByEmail()
    {
        // create a user and load it by email
        $userId = $this->_createUser();
        $user = $this->object->loadByEmail($this->data['email']);
        
        $this->assertEquals($userId, $user->getId());
        $this->assertEquals($this->data['email'], $user->mEmail);
        $this->assertEquals($this->data['name'], $user->mName);
    }

    /**
     * @todo Implement testInsert().
     */
    public function testCreate()
    {
        $userId = $this->_createUser();
        $this->assertTrue($userId > 0);
    }
    
    public function testLogin() {
        $userId = $this->_createUser();
        $email = $this->data['email'];
        $password = $this->data['password'];
        
        $result_fail = Ediary_User::login($email, 'wrong password');
        $result_ok = Ediary_User::login($email, $password);
        
        $this->assertFalse($result_fail->result);
        $this->assertNotNull($result_fail->message); // has a message on fail
        $this->assertTrue($result_ok->result);
    }

    private function _createUser() {
        return $userId = $this->object->create(
            $this->data['email'],
            $this->data['password'],
            $this->data['name']
        );
    }

    /**
     * @todo Implement testDelete().
     */
    public function testDelete()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
          );
    }

    /**
     * @todo Implement testUpdate().
     */
    public function testUpdate()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
          );
    }

    public function testIsExistsEmail() {
        // pre check
        $this->assertFalse($this->object->isExistsEmail($this->data['email']));

        $userId = $this->_createUser();
        $this->object->isExistsEmail($this->data['email']);

        // post check
        $this->assertTrue($this->object->isExistsEmail($this->data['email']));
    }
    
    // depends : Ediary_Journal::create()
    public function testGetJournals() {
        // create a user
        $userId = $this->_createUser();
        
        // create a journal for this test 
        $journal_data = array( 'title' => 'title', 'user_id' => $userId);
        $journal = Ediary_Journal::create($journal_data);
        $this->assertNotNull($journal->id);
        
        // find the user who just created
        $user = new Ediary_User();
        $user->find($userId);
        $this->assertEquals($userId, $user->getId());
        
        // get this user's journals
        $journals_from_db = $user->getJournals();
        //var_dump($journals_from_db);
        
        // the user is a new guy, so he only has one journal 
        $this->assertEquals(1, count($journals_from_db));
        $this->assertEquals($journal->id, $journals_from_db[0]->id);
    }
}
?>
