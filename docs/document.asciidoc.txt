= Ediary PHP Document =
lds <lds2012[at]gmail.com>
{localdate}

:language: php

.LOG
[width="100%"]
|====================================================================
|   Version     |       author      |       date        |       note
|   0.1         |       lds         |      2011-03-20   |        
|   0.2         |       lds         |      2011-04-26   |        
|====================================================================

== 系统要求 ==

ZendFramework 1.11.5
PHP >= 5.2, PDO, GD/Gmagick
MySQL >= 5
Apache, rewrite_mod

== 安装 ==

权限必须为 777:
    * `/public/uploads/`
    * `/application/data/cache/`
    * `/application/data/log/log.txt`


== application.ini 配置文件 ==

`/application/configs/application.ini`
全局配置文件.

复制 `application-sample.ini` 为 `application.ini` .

其中包括数据库等基本配置.

=== 参数 ===

.resources.db.params.host = "localhost"
数据库主机

.resources.db.params.username = ""
数据库帐号

.resources.db.params.password = ""
数据库密码

.resources.db.params.dbname = "eriji"
数据库名

.ediary.config.debug = "0"
    * "0" 关闭DEBUG
    * "1" 开启DEBUG

.ediary.config.logger.enable = "1"
    * "0" 关闭日志
    * "1" 开启日志

.ediary.config.logger.path = ""
日志文件绝对路径

.ediary.config.logger.type = "file"
日志类型: 
    * "file" : 日志储存到文件
    * "database" : 日志储存到数据库
    * "firebug" : 日志发送至firebug控制台

.ediary.config.installed = "0"
    * "1" 应用程序从未被安装
    * "0" 应用程序已经被安装


== autoLoad 命名方式 ==

module目录下的所有类名都使用 `Zend_Loader_Autoloader` , 命名方式为:
`Modulename_Model_Classname`

例如 `user` 模块下的名为 `User` 的类名如下:
`User_Model_User`


== magic quotes 魔法引号 ==

*魔法引号是被关闭的, 入库前必须注意安全性.*

关于为什么主动关闭魔法引号, 主要是考虑PHP今后的版本默认关闭魔法引号的特性.

所以入库都必须使用 `Zend_Db` 提供的 `quote` 或 `quoteInto` , 如果要对一次请求的所有POST或GET数组进行转义, 可以使用已封装好的内部魔法引号对一个数组进行转义:
[source]
----------------------------------------------
Ediary_Db::addMagicQuotes($array);
----------------------------------------------
该方法会递归的对数组的 *值* 进行转义, 返回的数据可以安全入库.


== 数据安全性 ==

在 `Ediary` 库中的基本类几乎都没有对于数据进行验证,过滤(除了转义引号,防止SQL注入以外), 因为这个层面的设计是完全相信输入的数据, 不仅相信数据是非恶意的, 而且认定将会输入正确的数据(如不会输入不存在的field).

所以不要直接使用 *用户输入* 作为参数来直接调用这些类的公共方法, 用户是魔鬼.必须使用 `Controller` 作为这个底层和用户层的缓冲带, 验证/过滤用户传递来的所有数据(防止各种恶意/非正常输入). 

.FILTER INPUT, ESCAPE OUTPUT
    * Filter input : 推荐使用 `Zend_Filter_Input` .
    * Escape output: 推荐使用 `Zend_View->escape()` .


== Cache 缓存系统 ==

如果使用缓存系统, 缓存目录必须可读可写:
`/application/data/cache`

=== 生成HTML ===

只需要在controller的init中只用cache helper声明哪几个action是需要被缓存的即可, 在无缓存的情况下, 正常访问该action页面, 则会自动在 `public/static` (可配置) 目录下生成 HTML文件, 而在下一次请求的时候, apache rewrite将直接将请求重写到HTML文件. 

.例如

[source]
----------------------------------------------
class Help_IndexController extends Zend_Controller_Action }

  $this->_helper->cache(array('index'), array('allentries'));

  public function indexAction() {
  }

}
----------------------------------------------

首次访问: `/help` , 会生成HTML文件于 `/public/static/help.html` , 下此同样使用 `/help` 访问时, 则会定向到该静态文件.

== Module 多模块系统 ==

本模块系统完全使用 Zend Framework 的MVC, 并在此基础上扩展了部分内容, 以统一模块风格.

.目录结构:
    * controllers , 控制器目录
    * models , 模型目录
    * views , 视图目录
    * Bootstrap.php , 模块bootstrap文件.

MVC三个目录与Zend Framework完全统一, 包括命名约定即子目录结构.

需要主要的是每个目录可有一个独立的模块bootstrap文件, 该文件会在整个application boot的时候, 也就是在调用全局的Bootstrap文件之后, 调用每个模块的子bootstrap文件, 因此需要注意几点:

    * 该bootstrap类的命名约定为 `模板名_Bootstrap` , 例如 `Help` 模块的bootstrap为 `class Help_Bootstrap extends Zend_Application_Module_Bootstrap` .
    * 因为在bootstrap文件中的 `_initXXX()` 类型方法, 会在每次应用启动时(每次请求)都会被调用, 因此只应该把与 `bootstrap` 相关的逻辑内容(比如注册block等)放置在该文件中, 而其他无关的逻辑应该放置到独立的类中(models文件夹下). 而最好的约定是所有子模块的 bootstrap 只存在一个init类型方法, 即 `_initModule` .
    
=== 新建模块 ===

暂无。


== Block 区块系统 ==

本系统支持一个全局性的block系统, 每个模块都可以在其中注册自己的block, 而全局行的所有其他模块和位置都可以调用注册了的block.

=== 注册区块 ===

例如目前有一个 `Node` 模块, 其想要注册一个 *文章区块* , 该区块用于显示某一篇文章内容. 可以在 `Node` 模块下的 `Bootstrap` 中注册一个区块(可以在独立的文件中定义区块的回调函数, 也可以直接在 `bootstrap` 中定义):

例如:
[source]
--------------------------------------------------------
<?php

class Node_Bootstrap extends Zend_Application_Module_Bootstrap
{
    protected function _initModule() { 
        $block = Ediary_Block::getInstance();

        // 注册区块
        $block->addBlock('Node', 'node', array($this, 'nodeBlock'));
    }


    // ...
}

--------------------------------------------------------
 
其中注册区块需要提供三个参数:
    * `$namespace` , 一般为模块名
    * `$blockname` , 注册的区块名
    * `$callback` , 区块回调函数, 可以为某个函数名, 也可以是某个类的方法名, 例如 `array("myClass", "myFunc")`

=== 新建区块 ===

区块其实就是一个回调函数, 该函数返回一个字符串, 该字符串即为区块的内容, 所以一般情况下, 该函数应该是返回一个 HTML 代码片段, 可以结合模板系统协作使用, 区块的主体用于准备响应数据, 而使用模板系统去格式化HTML代码, 以返回输出内容.
   
[source]
--------------------------------------------------------
class Node_Bootstrap extends Zend_Application_Module_Bootstrap
{
    // ...

    public function nodeBlock() {
        $view = new Zend_View();
        $node = $db->fecthAll('SELECT * FROM {node} where node_id =?', $node_id);
        $view->node = new Node($node);
        return $view->render("templates/node.phtml");
    }
}
--------------------------------------------------------

== 使用区块 ==

[source]
------------------------------------------------------------------
$content = Ediary_Block::getBlock('Node', "node", array('help'));
------------------------------------------------------------------

该方法返回的内容就是回调函数返回的内容，也就是该区块的HTML代码。

== Theme 模板系统 ==

本程序提供了一个包装了 `Zend_View` 功能的模板系统，该模板用于固定格式的HTML代码生成，比如生成一个列表的HTML代码，或者生成一个导航菜单等。

=== 使用模板 ===

[source]
------------------------------------------------------------
$items = array(
    array(
     	'title' => '常见问题解答',
        'link'  => '/help',
        'current' => true
    ),
    array(
        'title' => 'API 文档',
        'link'  => '/help/api',
    )
);

$html = Ediary_Theme::theme("Core", 'list', array(
       		'items' => $items, 
            'attrs' => array('class' => 'sideNav')));
------------------------------------------------------------

这里调用的是系统内置的列表模板，该模板用于生成一个 `<ul><li><a></a></li></ul>` 格式的链接表单.

=== 自定义模板 ===

该模板系统的底层是 `Zend_View` ,　因为一般情况下自定义模板就是提供一个 `.phtml` 的视图脚本，脚本中的变量依然是使用 `Zend_View` 风格的 `$this->foo` 来进行访问，例如：


[source,html]
------------------------------------------------------
<ul class="sideNav">
	<?php echo $this->content ?>
	<li class="current"><a href="/help/faq">常见问题解答</a></li>
	<li><a href="/help/api">API接口</a></li>
</ul>
------------------------------------------------------

在调用该模板的时候只需要将content作为参数提供进去就行了，例如：
`Ediary_Theme::theme("Node", "sidebar", array("content" => "foo"))`


== 注册模板 ==

模板注册的时候提供视图脚本的绝对路径即可, 例如

[source]
---------------------------------------------------------------
 $listTemplate = $this->_path . "/views/templates/list.phtml";
 Ediary_Theme::register("Core", "list", $listTemplate);
----------------------------------------------------------------




== Logger 日志系统 ==

使用日志系统,必须在配置文件中开启日志功能.

日志文件默认存储在:
`/application/log/log.txt`


== i18n 多国语言 ==

使用 `gettext` 实现多国语言支持, `mo` 文件集中储存在:
`/application/data/languages/`

默认语言为 `zh` .

在 `controller` 或 `view` 里都可以自动统一的翻译函数:
`echo _t("需要翻译的输出信息")`

== 数据库表类 ==

几个基本类, 例如 `User` , `Diary` 在进行 *增删改查* 的基本数据库操作时几乎都使用了一个中间层, `Ediary_Query_Record` , 该类是结构基本上是使用 `Habari` 代码中的 `/system/classes/QueryRecord.php` .

该类的基本结构是:
[source]
---------------------------------------
<?php

class Ediary_Query_Record {
    // 字段集合
    protected $fields = array();
    // 修改集合
    protected $newFields = array();

    // 增
    public function insertRow($tableName);
    // 删
    public function deleteRow($tableName);
    // 改
    public function updateRow($tableName);

    // 魔法GET, 取$fields和$newFields的值
    public function __get($name);

    // 魔法SET
    // 如果$fields没有设置$name的值,则设置到$fields里面
    // 若$fields中已存在$name的值, 就将新的$name值视作修改值, 设置到$newFields
    public function __set($name);
}
----------------------------------------

在此类的基础上建立一个帮助行的中间层, 完善了几个基本的数据库操作:
[source]
------------------------------------------------
<?php

class Ediary_Query_Adapter extends Ediary_Query_Record {
    // 字段的默认值
    protected $defaultFields = array();

    // 增, 添加后会将newFields更新到fields, 并清空newFields.
    public function insertRow($table);

    // 删, 根据主键id进行删除
    public function deleteRowById($table);

    // 改, 根据主键id进行更新
    public function updateRowById($table);

    // 查, 根据主键id进行查找
    public static function findRowById($table, $id);

    // 检查是否存在某条数据, $where, $bind为Zend_Db_Select中的where子句.
    public static function isExistsRow($table, $where, $bind);

    // 将fields转为数组
    public function toArray();

}
-----------------------------------------------

    


== Testing 单元测试 ==

使用 `phpunit` 做单元测试. `phpunit.xml` 文件已经配置好所需的信息, 足够boot整个应用程序的基本环境, 即在测试里可以和正常环境下一样使用.

尽量保证每天最后一次提交代码前必须运行并通过所有单元测试, 不要遗留问题.

.运行所有测试:
转到 `/tests/` 目录下, 终端(命令行)下直接运行:
[source,bash]
---------------------
phpunit 
---------------------

.运行单个测试文件:
[source,bash]
--------------------------------------
phpunit --bootstrap bootstrap.php library/Ediary/Ediary_DiaryTest.php
--------------------------------------

NOTE: 必须加载 `bootstrap.php` ,该文件会boot起整个 `Zend Framework` 环境(依然是模拟环境,并非是真实的环境, 但足够进行各种测试)

NOTE: 在测试文件中的 `setup` 中必须有 `parant::setUp()` , 否则应用程序将不会正常boot. 

== User 用户模块 ==

目前的 `Ediary_User` 和其他几个类有很大区别, 属于历史遗留问题, 使用的早期设计, 故没有和其他类使用统一的结构.

=== 新建用户 ===

新建用户时需要提供两个参数 `email` 和 `password` .

可以作为识别用户的只有 `id` 和 `email` , `name` 不能作为identification, 用户名只是作为一个显示, 而非识别, 可以是任意数字字符,甚至可以包括空格(兼容外国人名字).

大部分如 `Ediary_User->find($who)` 方法都提供了重载机制,即:
    * 当 `$who` 输入的为一串数字时, 则被识别输入的 `id` .
    * 当 `$who` 输入的是符合电子邮件格式的字符串时, 则被识别为 `email`.

NOTE: 不允许使用已经注册过的Email创建新用户, 前端会在输入时进行即时提示, 后端会直接拒绝(不会抛异常).

=== 用户验证 ===

=== Validate ===

当其他地方需要检验用户名/密码/电子邮箱的输入值是否合法时( `validate` ), 例如检查注册表单传递来的POST值, 可以直接条用静态方式:
[source]
-----------------------------------------
// return boolean
Ediary_User::isValidEmail($email);
Ediary_User::isValidUsername($name);
Ediary_User::isValidPassword($password);
-----------------------------------------

=== 判断用户是否存在 ===

`Ediary_User::isExists($who)`

=== 数据库原型 ===

用户在数据库中的主键是 `id` ,为一个自增长值.

`email` 为 `UNIQUE KEY` , 带索引并不允许重复.


== metadata 元数据 ==

`class Ediary_Metadata` 

元数据设计用于储存以键值对为基础的表类型, 多用于非固定的设置/配置/格外数据等.

.数据库模型
[width="40%"]
|=========================================================
|umeta_id       | user_id    | meta_key     | meta_value
|auto_increment | bigint(20) | varchar(255) | longtext
|=========================================================

NOTE: 这里的 `user_id` 只是一个例子, 每种数据的此列名都不相同, 例如 `Diary` 类的这里就是 `diary_id` .


.对元数据进行增删改查

[source]
----------------------------------------
// 实例化某种类型的元数据模型
$usermeta = new Ediary_Metadata('usermeta', 'user_id', 3);

// 添加
$usermeta->insert('key', 'value');

// 更新
$usermeta->update('key', 'newValue');

// 查询
$key = $usermeta->find('key');

// 删除
$usermeta->delete('key');

// 静态方法, 获取id为3的这个用户的的所有元数据
$all_usermate = Ediary_Metadata::getAll('usermeta', 'user_id', 3);
// 将会返回一个数组
array(
    array('key1' => 'value1'),
    array('key2' => 'value2')
)
-----------------------------------------

== Session 会话持久化 ==

`session` 信息不使用php原生的file做储存媒介, 而使用本程序自带的数据库做session信息存储器, 使用方法和原生态的session方法一致, 只是不以文件的形式存储在系统的session缓存目录, 而是存储在本数据库的 `sessions` 表中.

在 `login` 动作的时候如果提供 `$_POST["remeberMe"]` 参数(参数的值任意), 则会将该 `sessionID` 储存到客户端的 `cookie` 中去, 过期时间为一个月. 并且将该 `session` 的过期时间也同样设置为一个月.

在 `logout` 动作的时候会删除设置在客户端的 `cookie` 和服务器端(数据库) 中的 `session` .

因为 `session` 存储在数据表中, 所以其生命期不再由 `session.gc_maxlifetime`  或 服务器系统(比如清空session缓存目录) 来决定, 其持久化的层度只由本应用程序决定, 独立于运行在同一台服务器上的其他所有程序.




== Style 样式布局 ==

样式应以简洁为主. 还原日记的本质, 靠近纸质书写的体验.

.layout
`/application/layouts/scripts/layout.phtml`
全局布局文件(HTML总结构).

.style
`/public/css`

.首页模板
`/application/modules/default/views/script/index/index.phtml`


=== User theme 用户主题 ===

每个用户默认都拥有一个主题设置.

主题一般可定义的背景图片,基本配色, 有限度的布局等.

主题目录在:
`/public/theme`

.主题模板
=============================================

.主题 `t0` 的基本文件列表
`/public/theme/t0/`
`/public/theme/t0/style.css`
`/public/theme/t0/preview.jpg`

主题要求:
    * 主题的根目录必须放置在 `public/theme` 文件夹下, 权限为所有人可读.
    * 主题的目录名必须是小写的主题名.
    * 必须包含一个样式文件, 名为 `style.css` .
    * 必须包含一张主题预览图, 名为 `preview.jpg` . 注意必须为 `JPG` 格式的图片, 图片大小推荐 `120x120` px.

=============================================

.管理主题
管理员用户可以在后台管理主题, 进行主题安装, 访问 `/admin/theme` .

目前仅支持主题查看, 点击安装时会自动安装 `/public/theme` 目录下的所有主题, 选择性安装暂时未提供支持.


== Diary Module ==

=== DoController ===

==== saveAction ====

使用 `Zend_Filter_StripTags` 对POST过来的diary content进行过滤, 没有使用html entity,是因为前端的tinyMCE对转义过的信息显示出来会直接显示HTML实体,而不是来浏览器上显示字符. stripTags 可以控制 allowTag , 所以对于XSS的预防还是有效的,不存在安全问题, 这是唯一的特例, 其他所以output都应该使用严格escape.

当 `$_POST['id']` 为 `-1` 时则认为是 `create` 动作, 否则都是 `update` .


== 重定向 ==

当访问不存在的控制器或动作时, 会重定向到 `default/error/error` 错误控制器做集中处理. 
    * 404:
    * 500:

.重定向:
    * 直接使用ZF提供的goSimple API
    * 使用倒计时重定向, 即先显示一个即将被重定向的倒计时页面,然后再重定向.

.倒计时重定向

原型:
`Ediary_Core::redirect($message, $title, $url)`

实例:
`$this->_redirect(Ediary_Core::redirect('登录成功', '首页', "/"));`





=== 分页 ===

默认使用封装了 `Zend_Paginator` 的 `Ediary_Paginator` 来进行分页, 配已模板系统则可以轻松的进行分页显示.

.原型
`Ediary_Paginator::factory($table, $where, $bind, $currentPageNumber = 1, $itemCountPerPage = 10)`

.例子
=======================================================
例如: 取得user id为3这个用户的第1页日记列表(按每页20篇分页).
[source]
-----------------------------------------
$paginator = Ediary_Paginator::factory('{diarys}', 'user_id = ?', 3, 1, 20);
---------------------------------------------------------
=======================================================

==== 参数 ====

.String $table
表名, 如果提供的表名带大括号, 则会自动添加表前缀.

.String $where
参考 `Zend_Db_Select` 的参数 `$where` .

.String|Array $bind
绑定到 `$where` 语句的参数, 参考 `Zend_Db_Select` 的参数 `$bind` .

.int $currentPageNumber = 1
当前页数, 参考 `Zend_Paginator` 的参数 `$currentPageNumber` . 注意: 如果提供的不是一个数字, 则会 *抛出异常* , 因为该值可能使用的是$_GET['page'] , 建议是对$_GET['page'] 进行检验和过滤, 不要直接传递GET值.

.int $itemCountPerPage = 10
每页显示的项目数量, 参考 `Zend_Paginator` 的参数 `$itemCountPerPage` .

==== 在视图中使用 ====

[source]
--------------------------------------------------------
<?php if (count($this->paginator)): ?>
<ul>
<?php foreach ($this->paginator as $item): ?>
  <li><?php echo $item; ?></li>
<?php endforeach; ?>
</ul>
<?php endif; ?>

<?php echo $this->paginationControl($this->paginator, 'Sliding', 'pagination_control.phtml'); ?>
                                   
--------------------------------------------------------

NOTE: 为复用考虑, 建议使用写好的独立模板来显示分页列表. 

== 权限设置 ==

直接用户组系统.

可新建用户组, 将用户加入用户组, 然后给用户组分配权限.

== library 库 ==

根目录下的 `/library` 文件夹是自动设置到 `include_path` 里面的, 并且使用 `Zend frameword` 统一的命名约定.

=== Ediary ===

应用程序核心 `core` .

=== API 应用接口 ===

本网站提供一款 REST (http://zh.wikipedia.org/zh/REST[wiki]) 风格的API应用接口，意在提供更多的写日记途径，例如手机客户端等。

为了用户资源的安全，所有API请求都毕竟提供OAuth认证信息。关于OAuth认证信息可参考 http://www.eriji.com/help/api/oauth[OAuth认证文档] 。


==== 日记 ====

===== 获取用户日记列表 =====

`api/user_diarys`

.user_id(可选), 没有此参数则获取已验证用户的id

.count(可选), 日记数量, 默认为 10.

.page(可选), 页码, 默认为 1.

.since(可选), 起始日期, 比如获取 `2010-11-20` 以后的日记

.max(可选), 结束日期, 比如获取 `2010-11-20` 之前的日记

.返回数据
[source, javascript]
---------------------------------------
{
  diarys: [
      {
          id: "10000068"
          title: "title"
          content: "content"
          weather: "sunshine"
          mood: "normal"
          status: "0"
          created_at: "2011-03-28 09:15:06"
          saved_at: "2011-03-28 09:15:06"
          user_id: "3"
          journal_id: "1"
      },
  current_page: 2,
  total_page: 7,
  total_diarys: 66
}
---------------------------------------

===== 删除日记 =====

`api/delete`

.user_id(可选), 没有此参数则获取已验证用户的id

.id(必须), 要删除日记的ID


.返回数据
[source, javascript]
---------------------------
{
    result: false
}
---------------------------

== Upload 文件上传 ==

`class Ediary_Upload` 

该类简单包装了 `Zend_File_Transfer` , 方便用于上传文件.

实例.
[source]
---------------------------------------
// 实例化一个 Zend_File_Transfer 
$upload = new Ediary_Upload(APPLICATION_PATH . '/../public/uploads');

// 使用按年/月的目录结构来储存上传文件
$upload->useSubDir(true);

// 接收文件, 注意这步不是服务器接收文件, 文件早已经上传到了服务器(在临时目录).
// 这个接收动作是指将临时目录中的文件移动到设置的上传目录
// 并且会对文件大小类型检查, 如果不符合检验器会返回false, 并拒绝移动文件到指定的上传目录
$upload->recevie('Filedata'); // uploadify file field name

// 将刚接收的文件的信息写入数据库, 成功写入返回 true
$result = $upload->store($this->_user->id);
---------------------------------------

== Image 图像处理 ==

`class Ediary_Image`

该类是对 `gmagick` 的简单包装, 用于进行简单的图像处理.

NOTE: 服务器必须安装 `gmagick` 扩展. 关于如何安装请参考PHP手册: http://www.php.net/manual/en/book.gmagick.php[Gmagick] .

.制作缩略图
[source]
-------------------------------------------------
$image = new Ediary_Image('/your/path/some.jpg'); 

$width = 100;  // 设置宽度
$height = 0;   // 设置高度,这里设置为0表示保持长宽比率自动设置.
$output = '/your/path/some_thumail.jpg'; // 输出文件

$image->thumnail($width, $height, $output);
-------------------------------------------------

.`__CALL`
可以直接调用 `class Gmagick` 的任何方法.


== OAuth ==

OAuth的服务提供使用的是 http://code.google.com/p/oauth-php/[oauth-php] 库.

注意 `OAuth` 的数据表使用的是独立的前缀名, 并且在安装其他系统表时并不会自动安装这些表.

整个 `OAuth` 部分保持其高度独立性和可移植性, 故在使用提供API服务前必须运行数据库的安装脚本:  `/library/oauth-php/store/mysql/index.php` .

OAuth的客户端基本只是用于测试, 使用的是 `Zend_OAuth` . 需要注意 `Zend_OAuth`  和 `php-oauth`在签名算法为HMAC-SHA1时会出现不兼容情况, 目前尚不知道是哪个的算法有问题, 需要使用Java和其他PHP库进行测试.

== 第三方库 ==
    * http://code.google.com/p/zfdebug/[ZFDebug]


== TODO ==

    * 实现注册后,自动重定向/登录到编写日记页面. [3-20]
    * 为今后扩展考虑,决定引入tinyMCE作为编辑器的底层. [3-21]
        - 尝试将tinyMCE默认的theme复制后,替换theme name来新建一个主题,但是试了很多次,总是报 `q is not a constructor` 查明为在加载 theme 目录下的 `langs/en.js` 时url错误, `undefined/en/js` , 应该是theme的路径出错, 但是 `themeManager` 里面的 `urls` 列表里面是存在一个正确的URL的, 而且 `editor_template.js` 也可以正确的GET到.
        - 因为尝试新建主题失败,所以只有直接修改自带主题. 复制 `advanced` 主题下的 `default` skin为 `ediary` .
        - 暂时取消所有按钮,只保留tinyMCE编辑器本身, 今后再决定按钮如果加入.
    * 应该对页面也进行一定的单元测试.
    * 对前端JS进行性能测试, 检查是否有内存溢出.
    * 决定去掉日记中的两个内容:
        - 心情, 因为要去描述一天的心情不是件容易的事情.会出现很多时候都使用默认的一种心情(比如"一般"), 使得这个字段变得没有太多意义.
        - 天气, 前端取消天气的input,就是说用户不能去改变天气, 原因是天气是和日期关联的, 外部API可以将(日期/城市)转换为天气, 让用户去记录天气会造成操作的复杂, "你记,或者你不记,天气就在那里,不变不移".
    * 进行 `doSave` 这个动作前端和后端的协调.
    * `doSave` 动作前端单元测试.
    * 决定取消 *日记本* 这个概念, 原因是: 任何一个人都不可能同时使用两个日记本来写日记, 而是使用完一个再使用另一个, 如果通过积分来决定用户是否有权限来开启另一个新的日记本, 假设增加积分只有两种可能:1.是充值;2.是写日记. 也就是说如果通过写一篇日记就可以增加一个积分的话, 那么在用户写完一本日记后, 肯定会有足够的积分来开启另一个日记本, 因此该积分制度并没有用处, 因为如果用户没有写完一本日记的话, 他也不会需要开启另一个日记本. 如果积分是一种增值方式, 需要购买才能开启另一个日记本的话, *写日记* 是本程序的基本功能, 而不应该是增值项目. 分日记本的唯一好处是 *分类* , 比如一个日记本就是一年的日记之类的, 那么就应该把日记本视作一种 *分类* .  而日记唯一需要进行的分类就是按月/季/年等方式, 比如用户需要查看一个某年的所有日记, 所以这里需要的 *分类* 概念又实际上是 *归档* ,按日期进行归档, 而这种归档完全可以根据日记的自带时间来进行, 而不需要另外的表来存储相关信息. 且更为灵活.
    * 实现日记列表, 新建统一的分类模板函数 . theme, page.
    * 决定将日记列表从 *标题列表* 改成 *标题/内容列表* ,  因为标题基本都是日期, 列出来没有多少意义, 而使用类似博客的形式把日记都分页列出来, 才更方便进行回顾性的浏览, 然后单日记浏览功能也需要实现.
    * 参考豆瓣, AUTO_INCREMENT = 10000000
    * 新建类型API的东西,用于AJAX请求, 和外部API的区别是认证方式不同, 将来可以参考此内部API开发外部API, 用于其他客户端请求.
    * 实现支持主题 theme .
    * Tabs支持ajax载入.
    * 日记列表管理/主题选择 插件独立化, 可在独立页面使用.
    * js段的分页管理器提取基类以复用.
    * 实现上传模块.
    * 获取某日记附件列表.
    * 删除附件功能.
    * 04-03 重构create table等数据库
    * 04-04 重构前端js, 将模块都分成独立文件, 使用ant自动合并, 删除不必要模块和代码. 因为文件被分割,所以在运行的需要配合ant进行build, 使用在跟目录直接使用命令 : `ant concatenate` 最好是配合eclipse的run auto-build功能.
    * 04-07 几天没有更新, 修复上次重构JS代码导致的原先单元测试失败问题. [DONE]

TODO:
    * 压缩tinymce代码

    首页-登录 -> today页面

.单日记页面伪代码
[source]
----------------------------------------------------------
if (指定了id) {
    打开某个特定的日记, 根据GET的ID选择显示内容
    $diary = getbyid(id);
    // 检查diary->user_id 是否等于当前用户ID, 否则显示"无权限"
} else {
    查询今天的日记
    $diarys = getbyData(today, user_id);
    if (今天写了日记) {
        显示出来id=xxx;
        $diary = getbyid(id);
    } else {
        今天没写日记, 显示空白编辑器(空白id=-1)
        $diary = new Diary(id = -1);
    }
}
----------------------------------------------------------

日记列表页面
分页查看

.router

单日记页面
/diary/ 今天的日记
/diary/1000000 某个特定的日记

日记列表
/diary/list
/diary/list/page/2 


用户需要查看旧日记的可能:
    * 指定查看特定的 *某一天* 的日记,来查询某些事情(比如查询12月23日我做了什么).
    * 回顾性的阅读日记, 浏览方式, 比如打开某个日记本, 一页一页的 *连续性* 阅读.
    * *搜索* 某个关键词, 比如我记得我某天做了某件事情或者去了某个地方, 但不记得是那是哪一天, 我输入一个关键词, 就是找到那篇日记.

用户回顾旧日记的时候基本上都不需要带有功能, 只是想看, 而不并不想去修改.



收集每天的只言片语, 将它们放在一起就是一篇日记.(每天可以投稿多次, 自动组织成一篇日记).

