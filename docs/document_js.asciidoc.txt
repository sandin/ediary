= Ediary Javascript Document =
lds <lds2012@gmail.com>
{localdate}

:language: javascript

.LOG
[width="100%"]
|==============================================================
|   version |   author  |   date        |   note    
|   0.1     |   lds     |   2011-03-18  |   create document
|==============================================================

== Ediary 应用程序 ==

=== Namespace 命名空间 ===

`window.Ediary`

本应用程序统一使用全局性的唯一命名空间 `Ediary` , 所有组件都必须储存在此命名空间下(第三外库除外).

`window.Ediary` 是除 `window.jQuery` 外唯一的全局变量.

=== Modular 模块化 ===

可扩展模块式, 可自由新建模块为程序做扩展.

`Ediary` 命名空间下模块的扩展形式, 如下格式:

.方法1:
直接把一个对象扩展到Ediary对象上.
[source]
------------------------------------------
var moduleObject = {
    // your module object 
};
Ediary.extend('moduleName', moduleObject);

// 此方法等同于:
Ediary.moduleName = moduleObject;
// 只是避免了定义重名的对象
------------------------------------------

.方法2:
模块独享一个匿名函数作为其模块的代码块.
[source]
------------------------------------------
Ediary.extend('moduleName', function(E){
    // 这里可书写任何代码, 该模块独享这个代码块
    // 整个模块定义在一个匿名函数内, 避免了全局变量污染
    // 该匿名函数的第一个参数指向全局命名空间对象 -- Ediary
    // 因此可以直接将对象存入到全局的命名空间中去:
    E.var = { name: 'object' };

    // 在外部(全局范围内)都使用如下方式来访问这个变量:
    // var name = Ediary.var.name;

    // 推荐的模块书写方式是只绑定一个变量到命名空间中:

    var YourModule = {
        name: 'lds',
        init: function() {
        },
        getName: function() {
        }
    };

    // 在命名空间中注册
    E.YourModule = YourModule;

    // 注意在该匿名函数中的 `this` 指针其实指向 `Ediary` 对象的,
    // 但不建议使用 `this` 关键词来引用 `Ediary` 对象, 而应该用 `E` 来引用.
    // 因为在后续版本中, `this` 指针的问题可能会改进, 指向其他对象.
    
}, options);
------------------------------------------

NOTE: 在这个匿名函数内部 `this` 指向的 `Ediary` 这个对象

NOTE: 如果扩展模块的moduleName已经存在, 将会抛出错误.

目前的模块设计大部分只是在使用一个统一的命名空间, 而并未使用模块化. 若今后有需要, 可扩展为实际的模块化(将所有模块集中储存在 `modules list` 中). 

.延迟加载模块
对于有些模块, 需要使用外部库, 或需要等待DOM解析完毕等情况,需要延迟加载模块,而非注册模块时立即加载,则可以使用 `autoLoad` 参数来实现:
`options: {autoLoad: false}`


[source]
-------------------------------------------
Ediary.extend('moduleName', function(E) {
    // your module code
}, {autoLoad: false});
-------------------------------------------

这样进行注册的模块不会立即被加载到命名空间中(此模块的匿名函数不会被立即执行), 而是被存储到一个模块列表中去 ( `Ediary.modules` ), 存储的具体实现为:

[source]
-------------------------------------------
Ediary.moudles['moduleName'] = {
    load: false,        // 标记为未加载模块
    origin: moduleFnc   // 此处origin对象储存的就是模块的匿名函数
};
-------------------------------------------

手动加载模块:

[source]
-------------------------------------------
Ediary.loadModule('moduleName');
-------------------------------------------

此时应用程序将会执行储存在modules list中的注册此模块时提供的匿名函数.

NOTE: 如果加载一个尚未注册过的模块,会不被允许并抛出提示.

=== baseUrl ===

`Ediary.baseUrl` 包含了应用程序可访问的根目录URL, 本例中为 `public` 文件夹的URL. 而因为 `public` 文件夹在服务器中就是网站的可访问根目录, 所以在不开启全URL路径的配置下, 默认的 `Ediary.baseUrl = ''` :
即 `public/js/somescript.js` 的表示方法为:
[source]
-------------------------------------
Ediary.baseUrl + '/js/somescript.js'
-------------------------------------

NOTE: `baseUrl` 的结尾总是没有斜杠的.

有一个帮助函数是: `Ediary.url()` , 该方法可自动添加baseUrl到制定的url字符串前面, 例如 `public/js/somescript.js` 的表示方法为:
[source]
---------------------------------
Ediary.url('/js/somescript.js');
---------------------------------

=== include() ===

可在js脚本中直接加载另一个js脚本, 方法是:
[source]
--------------------------------------
Ediary.include('/js/somescript.js');
--------------------------------------

NOTE: 该方法不会自动添加baseUrl到脚本路径前面.

=== 参数 ===

.autoLoad : true
是否立即自动加载模块


== i18n 多语言支持 ==

`Module i18n`

所有模块可以自带语言包来支持多语言系统, 并将语言包注册到全局语言包中( `Ediary.i18n` )里.

.注册语言包
[source]
-----------------------------------------------
E.i18n.extend('Validator', {
        USERNAME_INVALID: "用户名只能输入字符, 数字和空格",
        EMAIL_IS_NULL : "请输入您的邮箱地址",
        EMAIL_INVALID : "请输入正确的邮箱格式",
        EMAIL_IS_EXISTS : "该电子邮件已经被注册",
        PASSWORD_IS_NULL : "请输入您的密码",
        PASSWORD_INVALID : "密码只允许数字,字母和下划线",
        PASSWORD_TOO_SHORT : "密码至少8位数",
        PASSWORD_NOT_SAME : "两次输入的密码不一样"
});
-----------------------------------------------

.取出语言包
[source]
-----------------------------------------------
var i18n = E.i18n.get('Validator');

i18n.EMAIL_IS_NULL; // "请输入您的邮箱地址"
-----------------------------------------------

目前只支持单语言包, 多语言包注册将在今后考虑实现, 样式如:
[source]
-----------------------------------------------
E.i18n.extend('Validator.en', {});
E.i18n.extend('Validator.zh', {});
-----------------------------------------------


== Pad 记事本 ==

`class Pad`

添加 Pad 类, 作为日记本的聚合对象.

.其包括:
    * 编辑器 ( `Editor` ).
    * 通知器 ( `Notice` ). (非内部组件,全局部件)
    * 按钮 ( `Plugin` ).
    * 其他组件.


== Notice 通知器 ==

`class Notice`

Notice模块, 主要用于提示信息给用户.

.发送消息:
[source]
--------------------------------
// 如果指定delay值, 则delay毫秒后自动隐藏该消息.
Notice.showMessage(message, delay);
--------------------------------

NOTE: 在使用 `Notice.showMessage()` 前, 应该确保通知器已被初始化.( 初始化会绑定DOM元素 ).

.初始化通知器
[source]
-----------------------------------
// 使用默认参数
Notice.init();

// 指定DOM元素
Notice.init({ element : '#noticeId' });
-----------------------------------

NOTE: 通知器作为一个全局性的组件, 只会被初始化一次. 但init()方法是可以安全的被外部多次调用, 因为其内部确保了只会初始化一遍.

NOTE: 如果调用showMessage前没有手动初始化通知器, 通知器将会去尝试使用默认设置去初始化(寻找ID为默认值的DOM元素, 如果该元素不存在将会抛出提示信息);

=== 参数 ===

.element: '#notice'
DOM Element selector


== Editor 编辑器 ==

`class Editor`

Editor模块, 做为日记主编辑器, 处理与日记书写的主逻辑.

=== Plugin 插件 ===

编辑器支持 `Plugin` 系统.

编辑器中保存一个插件列表:
`Editor.plugins = {}` 

关于插件扩展方法参见 <<plugin>> .

=== Listener 监听器 ===

编辑器支持在各类事件上绑定回调的监听器,当事件触发时,会通知绑定在 *该事件* 上所有监听器, 监听器独立的对该事件进行响应.

例如当 编辑器的 *保存* ( `onSave` )事件被触发, 编辑器则会立即通知所有绑定在 `onSave` 事件上监听器. 监听器则开始自行处理各种响应. 

.注册监听器
[source]
-----------------------------------------------------
// add listeners
editor.addListener("onSaveSuccess", new E.Listener(function(event){
    // handle this event
}));

-----------------------------------------------------

.监听器原型
`void Ediary.Listenner(eventHandler);`

参数 `eventHandler` 为一个回调函数, 例如:
`function(params)`

注意传递进来的这个 `params` 是不确定的, 它由这个通知监听器的主体决定(一般是由事件的类型不同,参数而不同);

例如, 如果handle的是一个Ajax的 `onSuccess` 事件, 那么传递进来的就完全等同与 `jQuery AJAX success` 的参数:
`function(data, textStatus, jqXHR)`

如果handle的是一个普通的 `onClick` 事件, 那么传递进来的就完全等同与 `onClick` 的参数:
`function(event)`


.通知所有监听器
目前并未对返回数据进行集中的传递,而是Editor各自回调时自行传递数据, 也就是说回调的时候传递出去什么数据是自由的, 例如:

[source]
------------------------------------------------------
// Editor内部: 

// 例如可以把某个回调函数的参数全部传递出去:
success: function(data, textStatus, jqXHR) {
    // 此处直接把ajax success回调方法的参数全部传递主去
    that.events.callListener('onSaveSuccess', arguments);
}

// 所以此事件的监听器将会得到和原始回调函数一模一样的参数列表(包括顺序):
new E.Listener(function(data, textStatus, jqXHR) {
    console.log(data);
    console.log(textStatus);
    console.log(jqXHR);
}));

///////////////////////////////////////////

// 也可以有选择的自行传递一些值, 但注意, 为了和 arguments 方法统一,
// 传递出去的参数一定要用数组包装一个, 因为 arguments 是个伪数组:
var args = [{event: { target: 'target-0'}}];

// 如果想直接传递一个对象出去, 也可以把对象转换为伪数组:
var args = {}
Array.prototype.push.call(args);
args = Array.prototype.slice.call(args);

// 通知监听器
this.events.callListener('onClick', args);


-----------------------------------------------------

=== Callback ===

该编辑器在和后台服务器AJAX互动时, 可以接受服务器传递来的 `callback` 参数, 该参数为一个回调函数名(字符串), 如果编辑器实现了该回调方法则会根据服务器的要求去执行该回调函数.

[source]
-----------------------------
this.callback(callbackName);
-----------------------------

.实例:
=========================================
*服务器返回JSON对象:*
`{"callback": "doSomething"}`

[source]
----------------------------------------
// 某个方法中调用AJAX请求
var self = this; // this 为 Editor 对象本身

$.ajax({
    url: 'someurl',
    dataType: 'json',
    success: function(data) {
        if(data.callback) {
            self.callback(data.callback);
        }
    }
})

----------------------------------------
如果 `Editor.soSomething()` 是存在的, 则该回调方法会被调用.

=========================================

=== RTE 富文本编辑器 ===

`Editor` 类并不自己实现底层的编辑器功能, 而是使用开源而成熟的 `TinyMCE` 来提供富文本编辑器功能.

理想状态是兼容使用富文本编辑器和不使用富文本编辑器两种模式, 但初期为了开发简便, 并没有实现该想法.

目前的富文本编辑器功能几乎全都没有使用, 尽量保持简洁性, 引入该底层编辑器的原因是为了今后功能扩展考虑, 今后肯定会设计到富文本编辑的一些功能, 所以提前引入, 避免兼容性问题.


DELETE: 今后扩展时为了样式考虑,可以考虑不使用自带的toolbar button,而是在Editor外使用 `Editor.Plugin` 来绑定按钮事件, 调用 `tinyMCE.get("ID").execCommand()` .

.借鉴penzu方法,参考一下代码:
[source]
----------------------------------------------
 theme_penzu_toolbar_location: "docked",
 theme_penzu_toolbar_location_docked_element_id: "menudroprte",
----------------------------------------------

=== Auto Resize ===

目前的 `auto resize` 功能完全使用了 `penze` 网站的代码和设计, 即循环计时去判断当前的输入是否需要增加高度. 这样实现有一个坏处和一个好处:

    * 坏处: 500毫秒定时循环, 无疑是一个资源消耗.
    * 好处: 另外的实现办法要么监听enter键,要么监听onchange, 这样的用户体验都没有这种实现好, 原因很简单, 高度不仅会增加,还应该会自动减少, 而可以使得高度增加或减少的动作有很多,比如鼠标操作,键盘各种键(删除,退位),键鼠结合, 如果要去监听时间来实现高度自适应, 不仅逻辑上更为复杂, 消耗同样也很大.

而且每次增加的高度并不是几行,而是一整页的高度, 这样的好处在于:

    1. 减少处理DOM的次数, 处理DOM是又慢又消耗资源的动作.
    2. 相当与Word的用户习惯, 每次增加的高度相当于新建了一页,这样也符合纸质书写的体验, 写完一页后, 翻开新的一页.

NOTE: 目前此功能没有进行单元测试.

=== 参数 ===

.target : '#editor'
编辑器DOM元素选择器.

.titleElem : '#editor-title' 
标题DOM元素选择器.

.bodyElem : '#editor-body' 
内容DOM元素选择器.

.ajaxSetup: { dataType : 'json' }
jQuery.Ajax.Options.

.saveUrl : '' 
保存动作URL

.deleteUrl : ''       
删除动作URL


== Plugin 插件 ==
[[plugin]]

`class Plugin`

`Plugin` 主要设计用于与编辑器核心逻辑之外的部分扩展, 例如调用编辑器的一些附加按钮之类的, 扩展方式:

[source]
-----------------------------------------------
// 添加插件 
editor.addPlugin('SaveButton', new E.SaveButton());
------------------------------------------------

.编写自己的插件:
[source]
------------------------------------------------
// 编写插件
var SaveButton = Editor.Plugin.extend({

    init: function() {
        this._super();

        // 设置成员变量
        // some code here
    },
    
    // 延时init方法, 非实例化对象时立即调用
    // 而是被Editor延时调用(document.ready后)
    // 故可在其中对DOM进行处理
    delayInit: function() {
        // your code
    },
    
    // 非必须实现该方法, 但推荐实现.
    destory : function() {
    }
});
------------------------------------------------


.严格化Editor编辑器addPlugin时的检验:
    * 类型检验: 添加的插件必须是Plugin类的实例对象, 避免因类型错误,导致的异常.
    * 重名检验: 添加已注册过的插件名, 将不被允许, 会提示并拒绝添加.


== Events & Listener 事件监听器 ==

`class Events`
`class Listenner`

.特性:
1. 当某个事件发生时, 绑定在该事件上的监听器可以对该事件作为响应. 
2. 同名监听器是附加模式,即可以为同一个事件上绑定多个监听器, 当事件触发时, 所有监听器都可以作为响应.

新建 `Events` & `Listener` 两个抽象类, 用于给一些 *On方法* 绑定事件监听器, 例如为各种事件触发时绑定监听器( `onSave` , `onDelete` , `onCreate` 等).

.具体使用方法参考文档注释.

[source]
---------------------------------------------
/**
 * Class Events & Class Listener
 * 
 * Example: 
 * ------------------------
 * var obj = {
 *    events : new Events(),
 * 
 *    click : function() {
 *      this.events.callListener("onClick");
 *    }
 * }
 * 
 * obj.addListener('onClick', new Listener() {
 *    // Handler click event
 * });
 * obj.addListener('onHover', new Listener() {
 *    // Handler click event
 * });
 * ------------------------
 */
---------------------------------------------

NOTE: 暂时只有Editor类使用了该模式.


== Tests 单元测试 ==

使用 `Qunit` 做前端单元测试. 

http://docs.jquery.com/Qunit[官方文档]

.目录结构

`/tests/javascript/`:: 
    此文件夹仅用于Javascript单元测试, 因在htdocs目录外, 故外部无法直接访问. 用浏览器打开改文件夹下的html文件即可运行测试, 如果要运行所有测试, 可以直接访问该文件夹下的 `index.php` 文件.

`/tests/javascript/data`::
    此文件夹作为AJAX服务器端的模拟, 所有测试都不使用真实的后台服务器作为请求对象,而是模拟数据,使得前端的测试不依赖后台代码.

`/tests/javascript/js`::
    此文件夹包括需要进行测试的源文件, 实际就是 `/public/js` 的镜像 (linux环境使用的软链接, windows环境可以直接copy一份).

`/tests/javascript/unit`::
    此文件夹包含所有单元测试.


[source, bash]
---------------------------------
ln -s /path/to/root/public/js .
---------------------------------


== Class 继承模式 ==

`window.Class`

需要大量实例化的对象, 为节省内存并提高效率, 一律使用原型链的继承模式, 并使用 John Resig 的 Simple JavaScript Inheritance 代码对原型链的继承模式进行封装.

关于该继承方式可参考: http://ejohn.org/blog/simple-javascript-inheritance/[John Resig博文]

摘要如下:
[source]
----------------------------------------------
var Person = Class.extend({
  init: function(isDancing){
    this.dancing = isDancing;
  },
  dance: function(){
    return this.dancing;
  }
});

var Ninja = Person.extend({
  init: function(){
    this._super( false );
  },
  dance: function(){
    // Call the inherited version of dance()
    return this._super();
  },
  swingSword: function(){
    return true;
  }
});

var p = new Person(true);
p.dance(); // => true

var n = new Ninja();
n.dance(); // => false
n.swingSword(); // => true

// Should all be true
p instanceof Person && p instanceof Class &&
n instanceof Ninja && n instanceof Person && n instanceof Class
--------------------------------------------

== Libraries 外部库 ==

.第三方
    * http://jquery.com/[jQuery]
    * http://docs.jquery.com/Plugins/Validation[jQuery.Validation]
    * http://docs.jquery.com/Qunit[Qunit]
    * http://ejohn.org/blog/simple-javascript-inheritance/[Simple JavaScript Inheritance By John Resig]

.自写库
